<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Bart Lantz]]></title>
  <link href="http://bartlantz.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://bartlantz.com/"/>
  <updated>2013-06-21T18:19:33-04:00</updated>
  <id>http://bartlantz.com/</id>
  <author>
    <name><![CDATA[Bart Lantz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Better Print Screen, part I]]></title>
    <link href="http://bartlantz.com/blog/2012/05/14/creating-a-better-print-screen/"/>
    <updated>2012-05-14T00:00:00-04:00</updated>
    <id>http://bartlantz.com/blog/2012/05/14/creating-a-better-print-screen</id>
    <content type="html"><![CDATA[<p>After reading Randall Degges excellent post <a href="http://rdegges.com/how-i-learned-to-program">How I learned to
Program</a>, I decided to
give creating a screenshot program a try. It's always a bit of work to
take a screenshot, upload it to the web and then grab its permanent
link. So being a geek, I thought it high time this process was
automated!</p>

<p> I tried writing the program in python only, so that there were fewer
dependencies, but using the commandline program
<a href="https://en.wikipedia.org/wiki/Scrot">scrot</a> as the screenshot
snapping program added a lot of flexibility to the options for the
screenshot.</p>

<p>Without further ado, here are the parts of the program.</p>

<h2>Take Screenshot with scrot</h2>

<p>I start with a bash script that calls <a href="https://github.com/dreamer/scrot">scrot</a>, and passes in my program
as a parameter to scrot.</p>

<p>screen-upload.bash
```</p>

<h1>!/bin/bash</h1>

<p>/usr/local/bin/scrot '%m-%d-%Y-screenshot.png' -d 5 -u -e '/home/bart/projects/screen-upload/screen-upload.py $f'
```</p>

<p>Next, chmod +x the bash script:
<code>
chmod +x screen-upload.bash
</code></p>

<h3>Scrot Options explained</h3>

<ul>
<li><strong>-d 5</strong>: Delays the snap for 5 seconds.</li>
<li><strong>-u</strong>: Use the currently focused window.</li>
<li><strong>-e 'script'</strong>: Execute the following script after the screenshot
is snapped.</li>
<li><strong>$f</strong>: passes in filename to script.</li>
</ul>


<h2>On to the Python Picture Uploading Program</h2>

<p>Scrot takes a screenshot after a delay of 5 seconds of the currently
active window, it names the file with the current
date-screenshot.png, it then passes the filename into my program,
"screen-upload.py".</p>

<h2>Upload Image to Picasaweb</h2>

<p>For uploading the image to Picasaweb, I used the <a href="https://code.google.com/p/gdata-python-client/downloads/list">gdata
module</a>. Installing
it involved the standard: Download the module, extract it and cd into the
directory and  run "sudo python setup.py install".</p>

<p>In version 2 of screen-upload, I will rewrite the authentication to use Oauth2, so that
the authentication is more secure, for the alpha version, I am just
passing in the users email and password into the <strong>gd_client</strong> object.</p>

<p>```python
import gdata.photos.service
import gdata.media
import gdata.geo</p>

<p>filename = fname
gd_client = gdata.photos.service.PhotosService()
gd_client.email = username
gd_client.password = passwd
gd_client.source = 'screen-upload-1'
gd_client.ProgrammaticLogin()
print 'uploading',  filename</p>

<p>album_url = '/data/feed/api/user/%s/albumid/%s' % (username, album_id)
photo = gd_client.InsertPhotoSimple(album_url, 'New Photo',</p>

<pre><code>           'Uploaded using the API', filename, content_type='image/png')
</code></pre>

<p>```</p>

<h2>Copy URL into the Clipboard</h2>

<p>Copying the URL to the clipboard is easy as long as you are not too
concerned with cross-platform compatibility. I used the gtk module to
gain access to the clipboard on Linux systems.</p>

<p>```python
from gtk import Clipboard</p>

<p>def clip_store(pic_url):</p>

<pre><code>cb = Clipboard()
cb.set_text(pic_url)
cb.store()
</code></pre>

<p>```</p>

<p>This can be made more cross-platform with a series of try statements
that load platform specific libraries.</p>

<p>```python
try:
  import win32</p>

<p>...
try:
  from gtk import Clipboard</p>

<p>```</p>

<h2>Setting up the Keyboard Shortcut in Gnome 3.</h2>

<p>I had a bit of a bother creating a keyboard shortcut in Gnome.  I
created a new shortcut in the keyboard settings configuration, but
nothing happened.</p>

<p>Long story short: I created a shortcut under "Custom Shortcuts".  I
called it "Take Screenshot" and I named the script "screen-upload".
Then I created a symbolic link to the script in /usr/local/bin.</p>

<p><code>bash
ln -s ~/projects/screen-upload/screen-upload.bash /usr/local/bin/screen-upload.
</code></p>

<p>This did the trick, now when I press the PrtSc button, a screenshot is
taken of the current window, and its uploaded to Picasa and the URL of
the image is copied in to my clipboard!</p>

<p><img src="https://lh4.googleusercontent.com/-UNPsuNmMnTI/T7RlkQmmoyI/AAAAAAAACo8/O-vIjTeCtCE/s800/New%252520Photo.png" alt="&quot;Screenshot of screen-upload.py in Emacs&quot;" /></p>

<h2>References</h2>

<ul>
<li><a href="https://developers.google.com/picasa-web/docs/1.0/developers_guide_python">Picasa-web Python Developer's Guide for API v1</a></li>
<li><a href="https://developers.google.com/gdata/docs/auth/overview">Google Data API Authentication Guide</a></li>
<li><a href="http://stackoverflow.com/questions/69645/take-a-screenshot-via-a-python-script-linux">Stackoverflow Answer for Taking Screenshot with python only</a></li>
<li><a href="http://rdegges.com/how-i-learned-to-program">Randall Degges: How I Learned to Program</a></li>
<li><a href="https://github.com/dreamer/scrot">Scrot's Github Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Web Enabled Lending Library]]></title>
    <link href="http://bartlantz.com/blog/2010/07/29/up-home-setting-up-lending-library-with/"/>
    <updated>2010-07-29T00:00:00-04:00</updated>
    <id>http://bartlantz.com/blog/2010/07/29/up-home-setting-up-lending-library-with</id>
    <content type="html"><![CDATA[<div id="content"><div id="outline-container-1" class="outline-2">
<h3 id="sec-1">Setting Up a Web Enabled Lending Library </h3>





<div id="outline-container-1.1"
     class="outline-3"><div class="outline-text-3" id="text-1.1">


<p>
I started cataloging books for a small community center's lending library at librarything.com.  Librarything.com is a
  great web site

that I highly recommend.  If most of your books have ISBNs and you can
borrow someone's barcode scanner, cataloging books at Librarything is
a snap: on the "add books page" you scan a books ISBN and all of its
information (Title, Author, book cover) will be added by Librarything
for you.  Of course if you don't have a bar code scanner or there is
no ISBN, you simply type in part of the title or author and select the
book from a list of possible matches, this is a bit slower, but
perfectly adequate if you are inputting a smaller library.  
</p><p>Once all of the books are added, the social networking goodness
begins!  You're library has its own mini-site at Librarything, with a
publicly available catalog: <a href="http://librarything.com/catalog/buildupbooks">Build Up Books catalog</a> and profile:
<a href="http://librarything.com/profile/buildupbooks">Build Up Books profile</a>. So for a community center, you can send out the URL, and anyone can search the catalog for books they find of interest.  
</p><p>The one problem with this system, is there isn't a robust system for
checking out books.  Some libraries have adapted an informal system of
tagging books as "checked out" and in the private comments (only
visible to the administrator) added the borrowers contact
information.  This is somewhat acceptable, but first: you would have
to give any volunteers access to all of your Librarything account's
permissions (you get all or nothing as far admin rights goes on
Librarything).  Second there is no way to tell when the book was
checked out, when it is due back, and also no way to sort by which
books are currently overdue.  So I thought I would look into importing
the library, once cataloged, into a drupal web site.  
</p></div>
</div>
<div id="outline-container-1.2" class="outline-3"><h3 id="sec-1.2">Exporting Library from Librarything </h3><div class="outline-text-3" id="text-1.2">

<p>Librarything has excellent importing and exporting facilities.  To
export, sign in to your account and then go to
<a href="http://librarything.com/more/import">http://librarything.com/more/import</a>.  On that page there are links for
downloading your catalog as either a comma separated csv file or a tab
delimited text file. 
</p></div>
</div>
<div id="outline-container-1.3" class="outline-3"><h3 id="sec-1.3">Downloading User Uploaded Book Covers </h3><div class="outline-text-3" id="text-1.3">

<p>Librarything has over 1,000,000 user uploaded book covers, and it
makes them available for free.  You need to a developer's key to
access them and there are some restrictions: you can only download
1000 per day and one per second. So with these understandable
restrictions, I decided it would be best to download the book covers
and store them locally.  So yesterday I wrote a python script to
download all of the book covers for our library.
</p></div>
</div>
<div id="outline-container-1.4" class="outline-3"><h3 id="sec-1.4">The Python Script </h3><div class="outline-text-3" id="text-1.4">

<p>I will add a link at the bottom to the script on my
<a href="http://github.com/underhilllabs">Github Repository</a>.  So the script I wrote searches through a
librarything csv file, finds all of the ISBNs and downloads the book
covers from <a href="http://librarything.com">Librarything</a>.  
</p>


<div>
  <pre><code class='python'>import re, urllib, csv,time

CSV_FILE ='~/Downloads/LibraryThing_export.csv'
IMG_DIR ='~/img/'
DEV_KEY = 'YOUR_LIBRARYTHING_DEV_KEY'
IMG_URL = &quot;http://covers.librarything.com/devkey/&quot; + DEV_KEY + &quot;/large/isbn/&quot;</code></pre>
</div>



<p>I use 4 python libraries.  
</p><ul>
  <li><b>Re</b>: for regular expressions to search for isbns.</li>
  <li><b>urllib</b>: for downloading the Book Cover from Librarything</li>
  <li><b>csv</b>: for creating a map data structure from a parsed csv file.</li>
  <li><b>time</b>: for limiting the downloads to one per second.</li>
</ul>
<p>Also I add a couple of variables.  The important one to change is
DEV_KEY which contains your librarything developers key.  Also make
sure the CSV_FILE points at your downloaded CSV_FILE and the IMG_DIR
exists.  Finally IMG_URL points to the web service on librarything
where you can download user submitted book covers, all you need to do
is slap an ISBN on the end of that URL and the URL will return either
a book cover, or a clear 1x1 gif if they do not have that cover.  
</p>


<div>
  <pre><code class='python'># read in the Librarything Export File
lt_dict = csv.DictReader(open(CSV_FILE))
#loop through the rows of the dictionary
for row in lt_dict:
    # grab the ISBN dictionary field
    mystr = row[&quot;'ISBN'&quot;]
    # search for a matching ISBN
    mymatch = re.match(r&quot;\[(\d+)\]&quot;,mystr)
    # if no match, print the title to STDOUT
    if mymatch is None:
        print &quot;blank isbn for: %s&quot; % row[&quot;'TITLE'&quot;]
    else:
        # grab the matching string, this is our ISBN!
        isbn = mymatch.group(1)
        # build the web service request URL
        myurl = IMG_URL + isbn
        # where we will store the downloaded Book cover image
        myfile = &quot;%slarge_%s&quot; % (IMG_DIR,isbn)
        # urlretrieve downloads the image and stores it locally
        urllib.urlretrieve(myurl,myfile)
        print &quot;myurl: %s, myfile: %s&quot; % (myurl,myfile)
        # sleep for 2 seconds
        time.sleep(2)</code></pre>
</div>




<p>The hard work is done by <a href="http://docs.python.org/library/csv.html#csv.DictReader">csv.DictReader</a> and <a href="http://docs.python.org/release/2.5.2/lib/module-urllib.html">urllib.urlretrieve</a>.
DictReader takes a csv file, parses the first line of the file for
field names and creates a dictionary data type, so you can loop
through the rows and have access to the fields by name.  Urlretrieve,
takes a URL and an optional file name and it grabs the file at the URL
and stores it locally as the filename you provided.  
</p><p>In a later blog post I will describe the Drupal end of this project:
creating a book CCK content type, importing data into Drupal custom
content types, and setting up the check out process.
</p></div></div></div></div>


<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7035860407900002000-2092323799751063501?l=denverdroid.blogspot.com' alt='' /></div>

]]></content>
  </entry>
  
</feed>
