<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Bart Lantz]]></title>
  <link href="http://bartlantz.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://bartlantz.com/"/>
  <updated>2013-06-21T18:19:33-04:00</updated>
  <id>http://bartlantz.com/</id>
  <author>
    <name><![CDATA[Bart Lantz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Git Goodness]]></title>
    <link href="http://bartlantz.com/blog/2012/01/28/more-git-goodness/"/>
    <updated>2012-01-28T00:00:00-05:00</updated>
    <id>http://bartlantz.com/blog/2012/01/28/more-git-goodness</id>
    <content type="html"><![CDATA[<h2>Git Show</h2>

<h3>Show a particular commit with git show</h3>

<p>This will show the commit as a diff.</p>

<p><div>
  <pre><code class='bash'>git show HEAD&lt;sup&gt;^^&lt;/sup&gt;</code></pre>
</div>
</p>

<p>Also you can use the commit's sha1 as an argument
<div>
  <pre><code class='bash'>git show 62114826e3f</code></pre>
</div>
</p>

<h2>Set git to output color</h2>

<p><div>
  <pre><code class='bash'>git config --local color.ui auto</code></pre>
</div>
</p>

<p>This command adds the following to your .gitconfig file:</p>

<p><div>
  <pre><code class='yaml'>[color]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ui = auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<h2>Git Bisect</h2>

<p>Try to find where in the version history a bug first appeared.</p>

<p><div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;h1&gt;start bisect&lt;/h1&gt;

&lt;p&gt;git bisect start&lt;/p&gt;

&lt;h1&gt;set good point: there was no bug here, this can be a tag, SHA1, or HEAD~18 ...&lt;/h1&gt;

&lt;p&gt;git good v1.2.6&lt;/p&gt;

&lt;h1&gt;set bad endpoint: we know it had shown up by here&lt;/h1&gt;

&lt;p&gt;git bad master&lt;/p&gt;

&lt;h1&gt;bisect will select a commit half way between good and bad&lt;/h1&gt;

&lt;h1&gt;test ... then tell git if its good or bad&lt;/h1&gt;

&lt;p&gt;git bisect good&lt;/p&gt;

&lt;h1&gt;it will split the other half in half&lt;/h1&gt;

&lt;p&gt;git bisect bad&lt;/p&gt;

&lt;h1&gt;when you've found the bad commit, reset the branch with&lt;/h1&gt;

&lt;p&gt;git biset reset&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Log to the Rescue]]></title>
    <link href="http://bartlantz.com/blog/2012/01/28/git-log-to-the-rescue/"/>
    <updated>2012-01-28T00:00:00-05:00</updated>
    <id>http://bartlantz.com/blog/2012/01/28/git-log-to-the-rescue</id>
    <content type="html"><![CDATA[<h2>Using Git Log</h2>


<h3>git log &#8212;stat</h3>




<p>If you&#8217;d like to see the number of changes in each file, add the &#8212;stat option.</p>


<p><img src="https://lh6.googleusercontent.com/-jaNagkLs3rU/Tu-DuIZKN1I/AAAAAAAACaE/xdNCDuVv6Vw/s800/git-log--stat.jpg" alt="" /></p>


<h3>git log &#8212;since=&#8220;3 weeks ago&#8221; &#8212;until=&#8220;yesterday&#8221;</h3>


<p>Git log also provides an intuitive way to provide a date range, with &#8212;since and &#8212;until options.</p>


<h3>git log -p</h3>




<p>With the -p option, git log will show patches of each of the commits.</p>


<p><img src="https://lh5.googleusercontent.com/-iULY5TLtYaw/Tu-D5rVPdGI/AAAAAAAACZw/U1Cr0Vh09Ao/s800/git-log-p.jpg" alt="" /></p>


<h3>git log &#8212;graph</h3>


<p>Git log with the &#8212;graph option prints a graph along the left edge to show branches of the repository.</p>


<p><img src="https://lh4.googleusercontent.com/-y3F733L3w9w/Tu-KMcMnp7I/AAAAAAAACac/YtfG0oN5kaU/s640/git-log-stat-graph-pretty-short.jpg" title="The stars in the graph show which branch the commits are on." alt="The stars in the graph show which branch the commits are on." /></p>


<p>The full command for the graph screenshot above is:</p>


<p><div>
  <pre><code class='bash'>git log --graph --stat --pretty=short</code></pre>
</div>
</p>

<p>The repository used in the graph example is the git repository itself.  You can clone it here:</p>


<p><div>
  <pre><code class='bash'>git clone git://github.com/gitster/git.git</code></pre>
</div>
</p>

<p>The repository used for the first two examples are from Drupal.  You can also clone drupal:</p>


<p><div>
  <pre><code class='bash'>git clone --branch 7.x http://git.drupal.org/project/drupal.git</code></pre>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Git]]></title>
    <link href="http://bartlantz.com/blog/2012/01/28/getting-started-with-git/"/>
    <updated>2012-01-28T00:00:00-05:00</updated>
    <id>http://bartlantz.com/blog/2012/01/28/getting-started-with-git</id>
    <content type="html"><![CDATA[<div id="content">
<div id="outline-container-1" class="outline-2">
<div id="outline-container-1-1" class="outline-3">

<h4 id="sec-1-1">Start Using Git on a Project</h4>
<div class="outline-text-3" id="text-1-1">




<div>
  <pre><code class='bash'># cd into project your working on
cd &lt;project&gt;
# initialize a git repository
git init  
# add all of the files to the repository
git add .
# now commit the files to repository
git commit -m &quot;My first commit message&quot;</code></pre>
</div>



</div>

<div id="outline-container-1-1-1" class="outline-4">

<h4 id="sec-1-1-1">Later, check which files have changed and are out of sync</h4>
<div class="outline-text-4" id="text-1-1-1">





<div>
  <pre><code class='bash'># this will list changed files and new files
git status
# this will add the newly updated updated_file.php to the commit
# staging area
git add updated_file.php
# commit changes with a good change message
git commit -m &quot;Fixed missing name bug in updated_file.php&quot;</code></pre>
</div>



</div>

</div>

<div id="outline-container-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">Create a remote repository</h4>

<div class="outline-text-4" id="text-1-1-2">




<div>
  <pre><code class='bash'># ssh into server and create repository directory
ssh boris@vladivostok.net
mkdir myproject
cd myproject
# --bare option means this repository will be pushed to and pulled
# from but never worked in directly (ie it will be a repository without working
# files).  This caused me no small amount of confusion when I first
# started using git.  
git init --bare
# exit out of distant vladivostok server
exit
# cd into local project
cd &amp;lt;project&amp;gt;
# add the remote repository
git remote add vladivostok ssh:boris@vladivostok.net:myproject
# now you can push a branch of the repository to the remote
# repository, &quot;master&quot; is the default main branch in git
git push vladivostok master</code></pre>
</div>


<p>
Sweet! Now your code is backed up on a remote server.  In fact your
code's entire history is on the remote server.  Everytime you make a
commit on the local server, you can push that change to the remote
server as well.
</p></div>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">Good Git Introductions</h3>
<div class="outline-text-3" id="text-1-2">


</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><a href="http://www.alistapart.com/articles/get-started-with-git/">Getting Started With Git</a></h4>
<div class="outline-text-4" id="text-1-2-1">

</div>

</div>

<div id="outline-container-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><a href="http://schacon.github.com/git/everyday.html">Everyday Git with 20 commands or so</a></h4>
<div class="outline-text-4" id="text-1-2-2">


</div>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">Git Next Level</h3>
<div class="outline-text-3" id="text-1-3">

</div>

<div id="outline-container-1-3-1" class="outline-4">
<h4 id="sec-1-3-1"><a href="http://think-like-a-git.net/epic.html">Think like a Git</a></h4>
<div class="outline-text-4" id="text-1-3-1">

</div>

</div>

<div id="outline-container-1-3-2" class="outline-4">
<h4 id="sec-1-3-2"><a href="http://www.linuxjournal.com/content/git-revision-control-perfected">Git: Revision Control Perfected</a></h4>
<div class="outline-text-4" id="text-1-3-2">

</div>

</div>

<div id="outline-container-1-3-3" class="outline-4">
<h4 id="sec-1-3-3"><a href="http://cmurphycode.posterous.com/git-201-slightly-more-advanced">Git 201: Slightly More Advanced</a></h4>
<div class="outline-text-4" id="text-1-3-3">

</div>

</div>

<div id="outline-container-1-3-4" class="outline-4">
<h4 id="sec-1-3-4"><a href="http://danielmiessler.com/study/git/">A Git Primer</a></h4>
<div class="outline-text-4" id="text-1-3-4">

</div>

</div>

<div id="outline-container-1-3-5" class="outline-4">
<h4 id="sec-1-3-5"><a href="http://eagain.net/articles/git-for-computer-scientists/">Git for Computer Scientists</a></h4>
<div class="outline-text-4" id="text-1-3-5">

</div>

</div>

<div id="outline-container-1-3-6" class="outline-4">
<h4 id="sec-1-3-6"><a href="http://tomayko.com/writings/the-thing-about-git">The Thing About Git</a></h4>

<div class="outline-text-4" id="text-1-3-6">


</div>
</div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">Git Workflow</h3>
<div class="outline-text-3" id="text-1-4">


</div>

<div id="outline-container-1-4-1" class="outline-4">

<h4 id="sec-1-4-1"><a href="http://scottchacon.com/2011/08/31/github-flow.html">Github's Git Workflow</a></h4>
<div class="outline-text-4" id="text-1-4-1">

</div>

</div>

<div id="outline-container-1-4-2" class="outline-4">
<h4 id="sec-1-4-2"><a href="http://nvie.com/posts/a-successful-git-branching-model/">Git-flow a more complex workflow</a></h4>
<div class="outline-text-4" id="text-1-4-2">


</div>
</div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">Github Stuff</h3>
<div class="outline-text-3" id="text-1-5">


</div>

<div id="outline-container-1-5-1" class="outline-4">
<h4 id="sec-1-5-1"><a href="http://net.tutsplus.com/tutorials/other/getting-the-hang-of-github/">Getting the Hang of Github</a></h4>
<div class="outline-text-4" id="text-1-5-1">

</div>
</div>

</div>
</div>
</div>



]]></content>
  </entry>
  
</feed>
