<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data Analysis | Bart Lantz]]></title>
  <link href="http://bartlantz.com/blog/categories/data-analysis/atom.xml" rel="self"/>
  <link href="http://bartlantz.com/"/>
  <updated>2013-06-21T18:19:33-04:00</updated>
  <id>http://bartlantz.com/</id>
  <author>
    <name><![CDATA[Bart Lantz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XQuery Notes]]></title>
    <link href="http://bartlantz.com/blog/2013/05/05/xquery-notes/"/>
    <updated>2013-05-05T21:44:00-04:00</updated>
    <id>http://bartlantz.com/blog/2013/05/05/xquery-notes</id>
    <content type="html"><![CDATA[<p>This post continues my notes from <a href="https://class2go.stanford.edu/db/Winter2013">Introduction to Databases</a>, a MOOC taught by Stanford's Jennifer Widom. The topic of this post is XQuery.</p>

<h2>XQuery Defition</h2>

<p><blockquote><p>XQuery is a query and functional programming language that is designed to query collections of XML data.</p><footer><strong>wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/XQuery'>From Wikipedia</a></cite></footer></blockquote></p>

<h2>XQuery Syntax: FLWOR</h2>

<p><code>xquery FLWOR Syntax
for $var in expr
let $var := expr
where expr
order by expr
return expr
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath Notes]]></title>
    <link href="http://bartlantz.com/blog/2013/05/05/xpath-notes/"/>
    <updated>2013-05-05T19:21:00-04:00</updated>
    <id>http://bartlantz.com/blog/2013/05/05/xpath-notes</id>
    <content type="html"><![CDATA[<p>This spring I took <a href="https://class2go.stanford.edu/db/Winter2013">Introduction to Databases</a> a MOOC (Massive Open Online Class) from Stanford's Jennifer Widom. It was very interesting, I learned a great deal from it. And one of the sections of the class that I really enjoyed, even though it sounded like it was going to be pretty dry, was the section on XML. I took quite a few pages of notes on the different XMl tools, so I figured I might as well post them to my blog.</p>

<h2>XPath Definition</h2>

<blockquote><p>XPath is a query language for selecting nodes from an XML document.</p></blockquote>

<p><a href="http://en.wikipedia.org/wiki/XPath">from Wikipedia</a></p>

<h3>XML for the Examples</h3>

<p>``` xml countries.xml
<countries>
  <country name="Afghanistan" population="22664136" area="647500"></p>

<pre><code>&lt;language percentage="11"&gt;Turkic&lt;/language&gt;
&lt;language percentage="35"&gt;Pashtu&lt;/language&gt;
&lt;language percentage="50"&gt;Afghan Persian&lt;/language&gt;
</code></pre>

<p>  </country>
  <country name="Albania" population="3249136" area="28750"/>
  <country name="Algeria" population="29183032" area="2381740"></p>

<pre><code>&lt;city&gt;
  &lt;name&gt;Algiers&lt;/name&gt;
  &lt;population&gt;1507241&lt;/population&gt;
&lt;/city&gt;
</code></pre>

<p>  </country>
</countries>
```</p>

<h3>Basic Path</h3>

<p>Selects all of countries from the country root node.
<code>xquery
doc('countries.xml')/countries/country
</code></p>

<h3>Path with Alternation</h3>

<p>This will select countries with populations that speak Pashtu or Swedish.
<code>xquery
doc('countries.xml')/countries/country[language(Pashtu|Swedish)]
</code></p>

<h3>Attributes are prepended with "@"</h3>

<p>This will select the names of all countries
<code>xquery
doc('countries.xml')/countries/country/@name
</code></p>

<h3>Path with Conditional</h3>

<p>Select the names of all countries that have a population of less than 1,000,000.
<code>xquery
doc('countries.xml')/countries/country[@population &lt; 1000000]/@name
</code></p>

<h3>Complex Conditional</h3>

<p>Select all countries that have a population of less than 1,000,000.
<code>xquery
doc('countries.xml')/countries/country[@population &lt; 1000000 and city/population &gt; 50000]
</code></p>

<h3>data() prints out just the text value.</h3>

<p><code>
doc('countries.xml')/countries/country[@population &lt; 1000000]/data(@name)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAS to R Notes]]></title>
    <link href="http://bartlantz.com/blog/2012/04/14/sas-to-r/"/>
    <updated>2012-04-14T00:00:00-04:00</updated>
    <id>http://bartlantz.com/blog/2012/04/14/sas-to-r</id>
    <content type="html"><![CDATA[<h2 id="sec-1">How I did part of a SAS assignment in R</h2>


<div class="outline-text-2" id="text-1">
<p>
I was working on a SAS assignment for my Regression Analysis class.
The residual plot in SAS was corrupted, luckily I was able to recreate
it in R. (And actually it looks better in R too.)
</p>



<div>
  <pre><code class='r'># read in data from file 
gpa.data &lt;- read.table(&quot;GPA.txt&quot;);
# create multiple linear regression model
gpa.fit &lt;- lm(V4 ~ V1 + V2 + V3 + V5 + V6 + V7 + V8, data=gpa.data)

# save residuals to a variable
gpa.resid &lt;- residuals(gpa.fit)
# save Predicted values to a variable
gpa.yhat &lt;- fitted.values(gpa.fit)

# create png file, that plot will be saved to.
#png(&quot;resid.png&quot;)
# create a plot of residuals vs predicted values
plot(gpa.yhat,gpa.resid, ylab=&quot;Residuals&quot;, xlab=&quot;Predicted Values of Cum GPA&quot;, main=&quot;Plot of Residuals*Predicted Values&quot;)
# create a line#
abline(0,0)
# write plot to file
#dev.off()</code></pre>
</div>






<p>  
<img src="http://bartlantz.com/assets/files/resid.png"  alt="resid.png" />
</p>

</div>




<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">ANOVA table of the Multiple Regression Model</h3>
<div class="outline-text-3" id="text-1-1">



Here is R's ANOVA command. Run it on the regression model gpa.fit.

<div>
  <pre><code class='r'>anova(gpa.fit)</code></pre>
</div>



Here is the output of the ANOVA command.

<div>
  <pre><code class='r'>Analysis of Variance Table

Response: V4
           Df  Sum Sq Mean Sq F value    Pr(&gt; F)    
V1          1   0.567  0.5669  1.8709  0.172001    
V2          1  26.488 26.4877 87.4135 &lt; 2.2e-16 ***
V3          1   9.096  9.0964 30.0194 6.839e-08 ***
V5          1   2.446  2.4459  8.0717  0.004683 ** 
V6          1   1.032  1.0324  3.4069  0.065524 .  
V7          1   0.020  0.0199  0.0655  0.798068    
V8          1   0.278  0.2784  0.9187  0.338288    
Residuals 492 149.084  0.3030                      
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1</code></pre>
</div>




</div>
The stars in R's output are the signoificance code.  In the above
summary output, V2, V3, V5 are very significant. V1, V7, and V8 are
not very significant; the regression model should be tested without them.

</div>




<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">Summary of Linear Regression Model</h3>
<div class="outline-text-3" id="text-1-2">




<div>
  <pre><code class='r'>summary(gpa.fit)</code></pre>
</div>





<div>
  <pre><code class='r'>Call:
lm(formula = V4 ~ V1 + V2 + V3 + V5 + V6 + V7 + V8, data = gpa.data)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.3345 -0.3387 -0.0059  0.3429  1.9661 

Coefficients:
              Estimate Std. Error t value Pr(&gt; |t|)    
(Intercept)  1.7792451  0.5165056   3.445  0.00062 ***
V1          -0.0383924  0.0527532  -0.728  0.46710    
V2           0.2716557  0.0417213   6.511 1.84e-10 ***
V3           0.0010404  0.0003173   3.279  0.00111 ** 
V5           0.0010332  0.0003425   3.016  0.00269 ** 
V6          -0.0391177  0.0239319  -1.635  0.10279    
V7          -0.0006554  0.0028471  -0.230  0.81805    
V8          -0.0054118  0.0056462  -0.958  0.33829    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.5505 on 492 degrees of freedom
Multiple R-squared: 0.2112, Adjusted R-squared:   0.2 
F-statistic: 18.82 on 7 and 492 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>



</div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on SAS]]></title>
    <link href="http://bartlantz.com/blog/2012/04/02/sas-notes/"/>
    <updated>2012-04-02T00:00:00-04:00</updated>
    <id>http://bartlantz.com/blog/2012/04/02/sas-notes</id>
    <content type="html"><![CDATA[<h2>The Data Step</h2>


<h3>Subsetting IF</h3>


<p>In a Data Step you can exclude some observations from the dataset with an if statement.
<div>
  <pre><code class='s'>data tornados_1980s;
  infile FileName;
  input year city damages;
  * this limits input data to 1980s data;
  if 1980 &amp;lt;= year &amp;lt;= 1989;
run;</code></pre>
</div>
</p>

<p><li> IF .. IN statement
<div>
  <pre><code class='s'>if year in (1980, 1981, 1982);</code></pre>
</div>
</p>

<p><li> AND, OR
<div>
  <pre><code class='s'>if year = '1980' and city = 'Baltimore';</code></pre>
</div>
</p>

<h3>infile 'filename'</h3>


<p>In the data step, import data from a file with the infile command.
<div>
  <pre><code class='s'>data tornados;
  infile 'tornados.dat';
  input year city cost;
run;</code></pre>
</div>
</p>

<h3>Set </h3>


<p><li> Use the set command to create a new data set from an already created
  set.
The following creates a dataset of 1980s tornado data from the larger
set of tornado data.
<div>
  <pre><code class='s'>data tornados_1980s;
  set tornados;
  if 1980 &amp;lt;= year &amp;lt;= 1989;
run;</code></pre>
</div>
</p>

<h2>The PROC Step</h2>


<h3>PROC SORT</h3>


<p><li> The sort procedure, sorts data. You can sort by multiple fields.
<li> Also you can print by a field.
<div>
  <pre><code class='s'>proc sort data=tornados;
  by year city;
proc print data=tornados;
  by year;
run;</code></pre>
</div>
</p>

<h3>PROC Univariate</h3>


<p>PROC Univariate generates descriptive statistics
<div>
  <pre><code class='s'>proc univariate data=tornados;
  histogram year;
run;</code></pre>
</div>
</p>

<h3>PROC means</h3>


<p>Use proc means when you are only interested in basic descriptive statistics.</p>

<h3>PROC freq</h3>


<p><li> generates tables for data in categories.</p>

<h3>PROC gplot</h3>


<p><div>
  <pre><code class='s'>proc gplot data=tornados;
  plot year*cost;
  title 'Year by Cost tornados';
run;</code></pre>
</div>
</p>

<h3>PROC corr</h3>


<h4>compute the correlation</h4>


<p><div>
  <pre><code class='s'>proc corr data=grades;
  var exam1 exam2 hwscore;
run;</code></pre>
</div>
</p>

<h3>PROC reg</h3>


<p><li> p: prints obs, predicted, residuals
<li> r: same as p, plus more
<li> clm: 95% conf interval for mean of each obs
<li> cli: 95% prediction intervals.
<div>
  <pre><code class='s'>proc reg data=grades;
  model final=exam1 hwscore / p r cli clm;
  plot final*hwscore;
run;</code></pre>
</div>
</p>

<h2>Multiple Regression Analysis</h2>


<h3>Variable Selection</h3>


<p>SAS has several methods for selecting variables</p>

<p><div>
  <pre><code class='s'>proc reg data=cdi;
  model y = x1-x8 /selection=rsquare best=1;
  model y = x1-x8 /selection=adjrsq best=5;
  model y = x1-x8 /selection=cp best=10;
  model y = x1-x8 /selection=forward slentry=0.10;
  model y = x1-x8 /selection=stepwise slentry=0.10 slstay=0.10;
  model y = x1-x8 /selection=backward slstay=0.10;
run;</code></pre>
</div>
</p>

<p>additional pages to try:
<a href=http://www.ats.ucla.edu/stat/sas/modules/graph.htm>more sas</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools for Working With Data]]></title>
    <link href="http://bartlantz.com/blog/2012/01/28/tools-for-working-with-data/"/>
    <updated>2012-01-28T00:00:00-05:00</updated>
    <id>http://bartlantz.com/blog/2012/01/28/tools-for-working-with-data</id>
    <content type="html"><![CDATA[<div id="content">


<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Web Scraping</h2>
<div class="outline-text-2" id="text-1">

<p>Web scraping is a technique of extracting information from websites.
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">Scraperwiki</h3>
<div class="outline-text-3" id="text-1-1">

<p><a href="http://scraperwiki.com">http://scraperwiki.com</a>
</p>
<p>
Scraperwiki has tutorials on scraping webpages for data, written for
Python and Ruby.
</p><ul>
<li><a href="http://blog.scraperwiki.com/2011/08/15/scraperwiki-tutorial-screencast-for-non-programmers/">ScraperWiki screencast on scraping for non-programmers.</a>
</li>
</ul>



</div>

</div>

<h3>Scraper: a Plug-in for Chrome</h3>
<a href=http://mnmldave.github.com/scraper/>Scraper</a> is a cool, chrome plug-in I've just discovered that makes scraping web pages easy.  Just 
<ol>
<li>Highlight part of a table, at least a row, that you want to scrape.
<li>Right-click on the selection.  Select "scrape similar" from the pop-up menu, and some reasonable scraping defaults will appear. 
<li>Press the "Export to Google Docs.." button to save the scraped data to a google docs spreadsheet.
</ol>


<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">Google Refine</h3>
<div class="outline-text-3" id="text-1-2">

<p><a href="http://code.google.com/p/google-refine/">http://code.google.com/p/google-refine/</a>
</p>
</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">Use to clean up messy and inconsistent data</h4>
<div class="outline-text-4" id="text-1-2-1">


</div>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">Chrome Developer Tools</h3>
<div class="outline-text-3" id="text-1-3">


</div>

<div id="outline-container-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">use to see the DOM underlying web pages</h4>
<div class="outline-text-4" id="text-1-3-1">

<p>If there is a table of data on a web page that you want to scrape,
select it with your mouse, right click on the selection and choose
inspect element in the pop up menu.  This should work in Safari,
Chrome or Firefox with the Firebug plug-in.
</p>
</div>
</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Data Analysis</h2>
<div class="outline-text-2" id="text-2">


</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1">R</h3>
<div class="outline-text-3" id="text-2-1">

<p><a href="http://www.r-project.org/">http://www.r-project.org/</a>
</p>
<ul>
<li>
</li>
</ul>




<hr/>
</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
